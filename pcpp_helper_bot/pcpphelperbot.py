import os
import re

import praw

from tablecreator import TableCreator


class PCPPHelperBot:
    """Posts PC Part Picker markup tables when applicable.
    
    This utilizes the PRAW wrapper for interacting with Reddit. It streams
    new submissions in order to look for submissions with a PC Part Picker
    list URL. If the post already has a table, no action will be taken. If
    not, or it is malformed, a reply containing the table will be posted.
    """
    
    def __init__(self, reply_template_filepath):
        # Retrieve environment vars for secret data
        username = os.environ.get('REDDIT_USERNAME')
        password = os.environ.get('REDDIT_PASSWORD')
        client_id = os.environ.get('CLIENT_ID')
        secret = os.environ.get('CLIENT_SECRET')
        
        version = 0.1
        user_agent = f"web:pcpp-helper-bot:v{version} (by u/pcpp-helper-bot)"
        
        # Utilize PRAW wrapper
        self.reddit = praw.Reddit(user_agent=user_agent,
                                  client_id=client_id, client_secret=secret,
                                  username=username, password=password)
        
        # Only look at submissions with one of these flairs
        # TODO: Are these the best submission flairs to use?
        self.pertinent_flairs = ["Build Complete", "Build Upgrade",
                                 "Build Help", "Build Ready"]
        
        with open(reply_template_filepath, 'r') as template:
            self.REPLY_TEMPLATE = template.read()
    
    def monitor_subreddit(self, subreddit_name: str):
        """Monitors the subreddit provided (mainly r/buildapc) for new
        submissions.
        
        Args:
            subreddit_name (str): The name of the subreddit
        """
        
        subreddit = self.reddit.subreddit(subreddit_name)
        
        # Stream in new submissions from the subreddit
        for submission in subreddit.stream.submissions():
            flair = submission.link_flair_text
            
            # Only look at text submissions and with the appropriate flairs
            if flair and flair in self.pertinent_flairs and submission.is_self:
                pcpp_elements = self.detect_pcpp_elements(submission.selftext)
                
                pcpp_url = None
                if len(pcpp_elements['anon']) != 0:
                    pcpp_url = pcpp_elements['anon'][0]
                    
                elif len(pcpp_elements['iden']) != 0:
                    #TOOD: Get the anon url
                    None
                    
                if pcpp_url:
                    self._reply_with_table(pcpp_url, submission)
                
    def _reply_with_table(self, pcpp_url, submission):
        """Replies to the submission with a Markup table with the components
        from the PC Part Picker list URL.
        
        Args:
            pcpp_url (str): PC Part Picker list URL
            submission (:obj"`PRAW.Submission`): A Submission object from PRAW

        Returns:
            PRAW Comment object representing the reply, or None.
        """
        
        if not pcpp_url:
            print(f"No url, or had table from {submission.title}")
            return None
        else:
            # TODO: Hand submission data to TableCreator
            print(f"Had url {pcpp_url} from {submission.title}")
            return None # TODO: Return the Reply object

    @staticmethod
    def detect_pcpp_elements(text):
        """Detects PC Part Picker tables, anonymous lists, and
        identifiable lists in the provided text.

        Args:
            text (str): Text of a submission (or comment) from Reddit.

        Returns:
            A dictionary of sets with the following keys: anon, table_head,
            table_foot, and iden . Anon holds anonymous list urls,
            table_head & foot contain the header and footer of properly
            formatted tables, and iden holds identifiable urls.
        """
        
        pcpp_elements = {'anon': set(), 'table_head': set(), 'table_foot': set(), 'iden': set()}

        # TODO: Look for newline characters (\n) between rows? Also breaks it
        # TODO: Combine into looking for the entire table?
        proper_table_head_pat = r"(?P<table_head>\[PCPartPicker Part List\])\((?P<table_url>https://pcpartpicker.com/list/\w+)\)"
        proper_table_foot_pat = r"(?P<table_foot>Generated by \[PCPartPicker\])"
        
        anon_list_pat = r"(?P<anon>https://pcpartpicker.com/list/\w+)"
        identifiable_list_pat = r"\((?P<iden>https://pcpartpicker.com/user/.+)\)"

        patterns = "|".join([proper_table_head_pat, proper_table_foot_pat, anon_list_pat, identifiable_list_pat])
        pcpp_elements_re = re.compile(patterns)
        
        for m in pcpp_elements_re.finditer(text):
            if m.group('anon'):
                pcpp_elements['anon'].add(m.group('anon'))
            if m.group('table_head'):
                pcpp_elements['table_head'].add((m.group('table_url'), (m.group('table_head'))))
            if m.group('table_foot'):
                pcpp_elements['table_foot'].add((m.group('table_foot')))
            if m.group('iden'):
                iden_url = m.group('iden')
                # Different view of the page that we don't want
                iden_url.replace("#view=", '')
                
                pcpp_elements['iden'].add(iden_url)

        return pcpp_elements
