from datetime import datetime
import pytz
from typing import List

from pcpp.part import Part

# Example Markup Table
"""
[PCPartPicker Part List](https://pcpartpicker.com/list/PtCbTJ)

Type|Item|Price
:----|:----|:----
**CPU** | [AMD Ryzen 5 5600X 3.7 GHz 6-Core Processor](https://pcpartpicker.com/product/g94BD3/amd-ryzen-5-5600x-37-ghz-6-core-processor-100-100000065box) | $300.00
**Motherboard** | [Gigabyte X570 AORUS ELITE WIFI ATX AM4 Motherboard](https://pcpartpicker.com/product/XV6qqs/gigabyte-x570-aorus-elite-wifi-atx-am4-motherboard-x570-aorus-elite-wifi) | $170.00
**Memory** | [G.Skill Ripjaws V Series 16 GB (2 x 8 GB) DDR4-3600 CL16 Memory](https://pcpartpicker.com/product/gJM323/gskill-memory-f43600c16d16gvk) | $109.99 @ Newegg
**Storage** | [Crucial P2 2 TB M.2-2280 NVME Solid State Drive](https://pcpartpicker.com/product/QggQzy/crucial-p2-2-tb-m2-2280-nvme-solid-state-drive-ct2000p2ssd8) | $224.99 @ Amazon
**Video Card** | [Zotac GeForce RTX 3070 8 GB GAMING Twin Edge OC Video Card](https://pcpartpicker.com/product/ThhmP6/zotac-geforce-rtx-3070-8-gb-gaming-twin-edge-oc-video-card-zt-a30700h-10p) | $550.00
**Case** | [Fractal Design Meshify C ATX Mid Tower Case](https://pcpartpicker.com/product/Y6Crxr/fractal-design-meshify-c-atx-mid-tower-case-fd-ca-mesh-c-bko-tg) | $108.25 @ B&H
**Power Supply** | [EVGA G3 650 W 80+ Gold Certified Fully Modular ATX Power Supply](https://pcpartpicker.com/product/y88H99/evga-supernova-g3-650w-80-gold-certified-fully-modular-atx-power-supply-220-g3-0650) | $115.84 @ Amazon
 | *Prices include shipping, taxes, rebates, and discounts* |
 | **Total** | **$1579.07**
 | Generated at 2021-01-03 12:45 EST-0500 |
"""


class TableCreator:
    """Create a Markdown table holding the provided component list.
    
    Yes...I could've just used the markup table provided by PC Part Picker,
    but wanted to parse the table anyhow, plus it may provide information
    that may be useful at a later point in time. Plus, I can change
    the format whenever I want too.
    """

    def __init__(self):
        """Initialize necessary variables. """
        
        self.timezone = pytz.timezone("America/New_York")
        self.markup = ""
        self.POST_AFF_URLS = False

    def create_markdown_table(self, url: str, parts_list: List[Part], total: str):
        """Creates a markdown table from the provided information.
        
        Args:
            url (str): The URL to the PCPartPicker list.
            parts_list (List[Part]): List of Part objects.
            total (str): Total cost of the component list.
        
        Returns:
            A string containing the markup table for the component list,
            along with the total and a link to the list. Very similar to
            the one generated by PCPartPicker.
            
            [PCPartPicker Part List](<URL>)
            Type|Item|Price
            :----|:----|:----
            <Component Type> | <Item> | <Price> (@ <Vendor>, Purchased, or empty)
            
        """
        
        url_link = f"[PCPartPicker Part List]({url})\n\n"
        headers = "Type|Item|Price\n"
        headers += ":----|:----|:----\n"
    
        body = ""
        for part in parts_list:
            body += self._create_markdown_part_row(part) + "\n"
    
        footer = self._create_markdown_footer(total)
    
        self.markup = url_link + headers + body + footer
        return self.markup

    def _create_markdown_part_row(self, part: Part):
        """Creates the markdown for a single component.
        
        Args:
            part (:obj:`Part`): A single Part object.

        Returns:
            <Component Type> | <Item> | <Price> (@ <Vendor>, Purchased, or empty)
        """
        
        component = f"**{part.component}**"
        item = f"[{part.name}]({part.url})"
        
        if len(part.price) != 0:
            price = part.price
        else:
            price = "No Price Available"
        
        # Vendor is 'Purchased', <Vendor name> with a url, or empty
        vendor = part.vendor
        
        if len(part.vendor_aff_url) != 0 and self.POST_AFF_URLS:
            # If you wanted to post the affiliate links.
            # But this causes moderation issues.
                vendor = f"@ [{part.vendor}]({part.vendor_aff_url})"
        elif len(vendor) != 0 and vendor != 'Purchased':
                vendor = f"@ {part.vendor}"

        row = f" {component} | {item} | {price} {vendor}"
        return row
        
    def _create_markdown_footer(self, total):
        """Creates the markdown for the footer section with the date and total.
        
        Returns:
            | *Prices include shipping, taxes, rebates, and discounts* |
            | **Total** | **<total>**
            | Generated at <time> |
        """
        
        price_info = "*Prices include shipping, taxes, rebates, and discounts*"
        total_price = f"**Total** | **{total}**"
        
        now = self.timezone.localize(datetime.now())
        now_str = now.strftime("%Y-%m-%d %H:%M:%S %Z%z")
        date_info = f"Generated at {now_str} | "
        
        footer = f" {price_info} | \n | {total_price} | \n {date_info} |"
        return footer
