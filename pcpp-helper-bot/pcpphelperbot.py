import os
import re

import praw

from markupcreator import MarkupCreator

class PCPPHelperBot:
    """Posts PC Part Picker markup tables when applicable.
    
    This utilizes the PRAW wrapper for interacting with Reddit. It streams
    new submissions in order to look for submissions with a PC Part Picker
    list URL. If the post already has a table, no action will be taken. If
    not, or it is malformed, a reply containing the table will be posted.
    """
    
    def __init__(self):
        # Retrieve environment vars for secret data
        username = os.environ.get('REDDIT_USERNAME')
        password = os.environ.get('REDDIT_PASSWORD')
        client_id = os.environ.get('CLIENT_ID')
        secret = os.environ.get('CLIENT_SECRET')
        
        version = 0.1
        user_agent = f"web:pcpp-helper-bot:v{version} (by u/pcpp-helper-bot)"
        
        # Utilize PRAW wrapper
        self.reddit = praw.Reddit(user_agent=user_agent,
                                  client_id=client_id, client_secret=secret,
                                  username=username, password=password)
        
        # Only look at submissions with one of these flairs
        # TODO: Are these the best to use?
        self.pertinent_flairs = ["Build Complete", "Build Upgrade",
                                 "Build Help", "Build Ready"]
        
        # TODO: Create a reply template
        self.REPLY_TEMPLATE = """"""
    
    def monitor_subreddit(self, subreddit_name: str):
        """Monitors the subreddit provided (mainly r/buildapc) for new
        submissions.
        
        Args:
            subreddit_name (str): The name of the subreddit
        """
        
        subreddit = self.reddit.subreddit(subreddit_name)
        
        # Stream in new submissions from the subreddit
        for submission in subreddit.stream.submissions():
            flair = submission.link_flair_text
            
            # Only look at text submissions and with the appropriate flairs
            if flair and flair in self.pertinent_flairs and submission.is_self:
                pcpp_url = self.detect_pcpp_elements(submission)
                
                # TODO: Only reply to comments if they have requested it?
                """
                submission.comments.replace_more(limit=0)
                for comment in submission.comments:
                    pcpp_url = self.parse_comment(comment)
                """
                
                self.reply_with_table(pcpp_url, submission)
    
    def detect_pcpp_elements(self, text):
        """Detects a PC Part Picker URL and if a correctly formatted table
        exists in the text.
        
        Args:
            text (str): Text of a submission (or comment) from Reddit.

        Returns:
            A PC Part Picker URL if one exists and a table is not present,
            else None.
        """
        
        has_table = re.search(r"(Generated by \[PCPartPicker\])", text)
        pcpp_url = re.search(r"\((https://pcpartpicker.com/list/\w+)\)", text)
        
        if not has_table and pcpp_url:
            return pcpp_url.group(1)
        else:
            return None
        
    def reply_with_table(self, pcpp_url, submission):
        """Replies to the submission with a Markup table with the components
        from the PC Part Picker list URL.
        
        Args:
            pcpp_url (str):
            submission (:obj"`PRAW.Submission`): A Submission object from PRAW

        Returns:
            PRAW Comment object representing the reply, or None.
        """
        
        if not pcpp_url:
            print(f"No url, or had table from {submission.title}")
            return None
        else:
            # TODO: Hand submission data to MarkupCreator
            print(f"Had url {pcpp_url} from {submission.title}")
            return None # TODO: Return the Reply object

        
